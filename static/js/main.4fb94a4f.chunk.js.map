{"version":3,"sources":["utils/index.js","components/Loader.js","components/App.js","registerServiceWorker.js","components/ToastMessage.js","components/Signin.js","components/Signup.js","components/Checkout.js","components/Navbar.js","components/Brews.js","index.js","img/logo.svg"],"names":["calculatePrice","items","reduce","acc","item","quantity","price","toFixed","calculateAmount","Number","setCart","value","cartKey","localStorage","setItem","JSON","stringify","getCart","getItem","parse","clearCart","removeItem","setToken","tokenKey","getToken","clearToken","Loader","show","position","dangerouslySetInlineStyle","__style","bottom","left","transform","color","size","margin","apiUrl","process","API_URL","strapi","Strapi","App","state","brands","searchTerm","loadingBrands","handleChange","setState","searchBrands","a","request","data","query","response","this","console","error","HashRouter","basename","display","justifyContent","marginTop","id","accessibilityLabel","onChange","placeholder","icon","marginBottom","backgroundColor","shape","wrap","map","brand","paddingY","width","key","_id","image","height","fit","alt","name","naturalHeight","naturalWidth","src","url","alignItems","direction","bold","description","Link","to","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ToastMessage","message","text","Signin","username","password","toast","toastMessage","event","persist","target","handleSubmit","preventDefault","isFormEmpty","showToast","loading","login","jwt","redirectUser","path","props","history","push","setTimeout","padding","style","textAlign","maxWidth","onSubmit","type","inline","disabled","React","Signup","email","italic","_CheckoutForm","cartItems","address","postalcode","city","confirmationEmailAddress","orderProcessing","modal","handleConfirmOrder","handleSubmitOrder","amount","stripe","createToken","token","createEntry","brews","redirect","closeModal","length","Fragment","onReady","input","focus","align","ConfirmationModal","accessibilityCloseLabel","accessibilityModalLabel","heading","onDismiss","footer","marginRight","marginLeft","onClick","role","CheckoutForm","withRouter","injectStripe","Checkout","apiKey","Navbar","handleSignout","AuthNav","NavLink","activeClassName","exact","logo","className","UnAuthNav","Brews","addToCart","brew","alreadyInCart","findIndex","updatedItems","concat","deleteItemFromCart","itemToDeleteID","filteredItems","filter","params","brandId","flexWrap","alignSelf","wash","iconColor","PrivateRoute","component","rest","Route","render","Redirect","pathname","from","Root","Switch","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.4fb94a4f.chunk.js","sourcesContent":["//Helpers page\r\n\r\nconst CART_KEY = 'cart';\r\nconst TOKEN_KEY = 'jwt';\r\n\r\n\r\n//calculate price\r\nexport const calculatePrice = items => {\r\n  return `$${items\r\n    .reduce((acc, item) => acc + item.quantity * item.price, 0)\r\n    /*In JavaScript, toFixed() is a Number method that is used to convert a number to fixed-point\r\n    notation (rounding the result where necessary) and return its value as a string.*/\r\n    .toFixed(2)\r\n  }`\r\n}\r\n\r\n//calculate price for stripe using a number type\r\nexport const calculateAmount = items => {\r\n  return Number(items\r\n    .reduce((acc, item) => acc + item.quantity * item.price, 0)\r\n    .toFixed(2));\r\n}\r\n\r\n\r\n//CART\r\n//Persisting cart even if we refresh using local storage\r\n//Set\r\nexport const setCart = (value, cartKey = CART_KEY) => {\r\n  if(localStorage){\r\n    localStorage.setItem(cartKey, JSON.stringify(value));\r\n  }\r\n}\r\n//Get\r\nexport const getCart = (cartKey = CART_KEY) => {\r\n  if(localStorage && localStorage.getItem(cartKey)){\r\n    return JSON.parse(localStorage.getItem(cartKey));\r\n  }\r\n  return [];\r\n};\r\n//Clear cart\r\nexport const clearCart = (cartKey = CART_KEY) => {\r\n  if (localStorage) {\r\n    localStorage.removeItem(cartKey);\r\n  }\r\n}\r\n\r\n//Auth - JSON Web Tokens\r\n//Set\r\nexport const setToken = (value, tokenKey = TOKEN_KEY) => {\r\n  if (localStorage) {\r\n    localStorage.setItem(tokenKey, JSON.stringify(value));\r\n  }\r\n};\r\n//Get\r\nexport const getToken = (tokenKey = TOKEN_KEY) => {\r\n  if (localStorage && localStorage.getItem(tokenKey)) {\r\n    return JSON.parse(localStorage.getItem(tokenKey));\r\n  }\r\n  return null;\r\n};\r\n//Clear cart\r\nexport const clearToken = (tokenKey = TOKEN_KEY) => {\r\n  if (localStorage) {\r\n    localStorage.removeItem(tokenKey);\r\n  }\r\n}\r\n\r\n/*\r\n//Array.reduce()\r\n\r\nconst array1 = [1, 2, 3, 4];\r\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n// 1 + 2 + 3 + 4\r\nconsole.log(array1.reduce(reducer));\r\n// expected output: 10\r\n\r\n// 5 + 1 + 2 + 3 + 4\r\nconsole.log(array1.reduce(reducer, 5));\r\n// expected output: 15\r\n\r\n*/","import React from \"react\";\r\nimport { GridLoader } from \"react-spinners\";\r\nimport { Box } from \"gestalt\";\r\n\r\n// Only shows spinner if show props is true\r\nconst Loader = ({ show }) =>\r\n  show && (\r\n    <Box\r\n      position=\"fixed\"\r\n      dangerouslySetInlineStyle={{\r\n        __style: {\r\n          bottom: 300,\r\n          left: \"50%\",\r\n          transform: \"translateX(-50%)\"\r\n        }\r\n      }}\r\n    >\r\n      <GridLoader color=\"darkorange\" size={25} margin=\"3px\" />\r\n    </Box>\r\n  );\r\n\r\nexport default Loader;","import React, { Component } from \"react\";\nimport {\n  Container,\n  Box,\n  Heading,\n  Card,\n  Image,\n  Text,\n  SearchField,\n  Icon,\n} from \"gestalt\";\nimport { HashRouter, Link } from \"react-router-dom\";\nimport Loader from \"./Loader\";\nimport \"./App.css\";\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nconst apiUrl = process.env.API_URL || \"https://strapi-server-raigyobeer.herokuapp.com\";\nconst strapi = new Strapi(apiUrl);\n\nclass App extends Component {\n  state = {\n    brands: [],\n    searchTerm: \"\",\n    loadingBrands: true,\n  };\n\n  // Retrieve the brands datas\n  async componentDidMount() {\n    try {\n      const response = await strapi.request(\"POST\", \"/graphql\", {\n        data: {\n          query: `query {\n            brands {\n              _id\n              name\n              description\n              image {\n                url\n              }\n            }\n          }`,\n        },\n      });\n      //console.log(response);\n      this.setState({ brands: response.data.brands, loadingBrands: false });\n    } catch (err) {\n      console.error(err);\n      this.setState({ loadingBrands: false });\n    }\n  }\n\n  // Input listener\n  /*handleChange = ({value}) => {\n    this.setState({ searchTerm: value });\n  };*/\n\n  handleChange = ({ value }) => {\n    this.setState({ searchTerm: value }, () => this.searchBrands());\n  };\n\n  // Filter the brands displayed according search term (in name and description)\n  /*filteredBrands = ({ searchTerm, brands }) => {\n    return brands.filter(brand => {\n      return (\n        brand.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        brand.description.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    })\n  }*/\n\n  searchBrands = async () => {\n    const response = await strapi.request(\"POST\", \"/graphql\", {\n      data: {\n        query: `query {\n          brands(where: {\n            name_contains: \"${this.state.searchTerm}\"\n          }) {\n            _id\n              name\n              description\n              image {\n                url\n              }\n          }\n        }`,\n      },\n    });\n    // console.log(this.state.searchTerm, response.data.brands);\n    this.setState({\n      brands: response.data.brands,\n      loadingBrands: false,\n    });\n  };\n\n  render() {\n    const { searchTerm, loadingBrands, brands } = this.state;\n\n    return (\n      <HashRouter basename='/'>\n        <Container>\n          {/* Brands Search Field */}\n          <Box display=\"flex\" justifyContent=\"center\" marginTop={4}>\n            <SearchField\n              id=\"searchfield\"\n              accessibilityLabel=\"Brand Search Field\"\n              onChange={this.handleChange}\n              value={searchTerm} //state is the single state of truth\n              placeholder=\"Search Brands\"\n            />\n            <Box margin={3}>\n              <Icon\n                icon=\"filter\"\n                /* Ternary true: orange, false: gray */\n                color={searchTerm ? \"orange\" : \"gray\"}\n                size={20}\n                accessibilityLabel=\"Filter\"\n              />\n            </Box>\n          </Box>\n\n          {/* Brands Section */}\n          <Box display=\"flex\" justifyContent=\"center\" marginBottom={2}>\n            {/* Brands Header */}\n            <Heading color=\"midnight\" size=\"md\">\n              Brew Brands\n            </Heading>\n          </Box>\n\n          {/* Brands */}\n          <Box\n            /* Gestalt properties for box */\n            dangerouslySetInlineStyle={{\n              __style: {\n                backgroundColor: \"#d6c8ec\",\n              },\n            }}\n            shape=\"rounded\"\n            wrap\n            display=\"flex\"\n            justifyContent=\"around\"\n          >\n            {/* {this.filteredBrands(this.state).map(brand => ( */}\n            {brands.map((brand) => (\n              <Box paddingY={4} margin={2} width={200} key={brand._id}>\n                <Card\n                  image={\n                    <Box height={200} width={200}>\n                      <Image\n                        fit=\"cover\"\n                        alt={`${\"Logo brand: \"}${brand.name}`}\n                        naturalHeight={1}\n                        naturalWidth={1}\n                        src={`${apiUrl}${brand.image[0].url}`}\n                      />\n                    </Box>\n                  }\n                >\n                  <Box\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    direction=\"column\"\n                  >\n                    <Text bold size=\"xl\">\n                      {brand.name}\n                    </Text>\n                    <Text>{brand.description}</Text>\n                    <Text bold size=\"xl\">\n                      <Link to={`/${brand._id}`}>See Brews</Link>\n                    </Text>\n                  </Box>\n                </Card>\n              </Box>\n            ))}\n          </Box>\n\n          {/*Gestalt spinner*/}\n          {/*<Spinner show={loadingBrands} accessibilityLabel=\"Loading Spinner\" />*/}\n\n          {/* GridLoader spinner */}\n          <Loader show={loadingBrands} />\n        </Container>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { Box, Toast } from \"gestalt\";\r\n\r\nconst ToastMessage = ({ show, message }) =>\r\n  show && (\r\n    <Box\r\n      dangerouslySetInlineStyle={{\r\n        __style: {\r\n          bottom: 250,\r\n          left: \"50%\",\r\n          transform: \"translateX(-50%)\"\r\n        }\r\n      }}\r\n      position=\"fixed\"\r\n    >\r\n      <Toast color=\"orange\" text={message} />\r\n    </Box>\r\n  );\r\n\r\nexport default ToastMessage;","import React from 'react';\r\nimport { Container, Box, Heading, TextField, Button } from 'gestalt';\r\nimport ToastMessage from './ToastMessage';\r\nimport { setToken } from \"../utils\";\r\nimport Strapi from \"strapi-sdk-javascript/build/main\";\r\nconst apiUrl = process.env.API_URL || \"https://strapi-server-raigyobeer.herokuapp.com/\";\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass Signin extends React.Component {\r\n\r\n  state = {\r\n    username: '',\r\n    password: '',\r\n    toast: false,\r\n    toastMessage: ''\r\n  }\r\n\r\n  //Check input values\r\n  handleChange = ({ event, value }) => {\r\n    event.persist();\r\n    this.setState({ [event.target.name]: value});\r\n  };\r\n\r\n  //Check form\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const { username, password } = this.state;\r\n    if (this.isFormEmpty(this.state)) {\r\n      this.showToast(\"Fill in all fields\");\r\n      return;\r\n    }\r\n    /*console.log(\"submitted\");*/\r\n        // Sign in user using strapi\r\n        try {\r\n          this.setState({ loading: true });\r\n          const response = await strapi.login(username, password);\r\n          this.setState({ loading: false });\r\n          setToken(response.jwt);\r\n          this.redirectUser(\"/\");\r\n        } catch (err) {\r\n          this.setState({ loading: false });\r\n          console.log(err.message);\r\n          //this.showToast(err.message);\r\n          this.showToast('New user, please sign up first!');\r\n        }\r\n  };\r\n\r\n  //redirect user to selected path\r\n  redirectUser = path => this.props.history.push(path);\r\n\r\n  isFormEmpty = ({ username,  password }) => {\r\n    return !username || !password;\r\n  };\r\n\r\n  showToast = toastMessage => {\r\n    this.setState({ toast: true, toastMessage });\r\n    setTimeout(() => this.setState({ toast: false, toastMessage: \"\" }), 5000);\r\n  };\r\n\r\n  render() {\r\n\r\n    // destructuring props: listen to states\r\n    const { toastMessage, toast, loading } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n          <Box\r\n              dangerouslySetInlineStyle={{\r\n              __style: {\r\n                  backgroundColor:'#d6a3b1'\r\n              }\r\n          }}\r\n          margin={4}\r\n          padding={4}\r\n          shape=\"rounded\"\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          >\r\n              {/* Sign in form */}\r\n              <form style={{\r\n                  display: 'inlineBlock',\r\n                  textAlign:  'center',\r\n                  maxWidth: 450\r\n              }}\r\n              onSubmit={this.handleSubmit}\r\n              >\r\n              {/* Sign in form heading*/}\r\n                <Box\r\n                  marginBottom={2}\r\n                  display=\"flex\"\r\n                  direction=\"column\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Heading color=\"midnight\">Welcome back!</Heading>\r\n                </Box>\r\n                {/* Username input */}\r\n                <TextField\r\n                  id=\"username\"\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  placeholder=\"Username\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                  {/* Password input */}\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                <Button\r\n                  inline\r\n                  color=\"blue\"\r\n                  text=\"Submit\"\r\n                  type=\"submit\"\r\n                  /* Disable button when loading */\r\n                  disabled={loading}\r\n                />\r\n              </form>\r\n          </Box>\r\n          <ToastMessage show={toast} message={toastMessage} />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\nimport { Container, Box, Heading, Text, TextField, Button } from 'gestalt';\r\nimport ToastMessage from './ToastMessage';\r\nimport { setToken } from \"../utils\";\r\nimport Strapi from \"strapi-sdk-javascript/build/main\";\r\nconst apiUrl = process.env.API_URL || \"https://strapi-server-raigyobeer.herokuapp.com/\";\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass Signup extends React.Component {\r\n\r\n  state = {\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    toast: false,\r\n    toastMessage: ''\r\n  }\r\n\r\n  //Check input values\r\n  handleChange = ({ event, value }) => {\r\n    event.persist();\r\n    this.setState({ [event.target.name]: value});\r\n  };\r\n\r\n  //Check form\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const { username, email, password } = this.state;\r\n    if (this.isFormEmpty(this.state)) {\r\n      this.showToast(\"Fill in all fields\");\r\n      return;\r\n    }\r\n    /*console.log(\"submitted\");*/\r\n        // Sign up user using strapi\r\n        try {\r\n          this.setState({ loading: true });\r\n          const response = await strapi.register(username, email, password);\r\n          this.setState({ loading: false });\r\n          setToken(response.jwt);\r\n          this.redirectUser(\"/\");\r\n        } catch (err) {\r\n          this.setState({ loading: false });\r\n          console.log(err.message);\r\n          //this.showToast(err.message);\r\n          this.showToast('User already registered!');\r\n        }\r\n  };\r\n\r\n  //redirect user to selected path\r\n  redirectUser = path => this.props.history.push(path);\r\n\r\n  isFormEmpty = ({ username, email, password }) => {\r\n    return !username || !email || !password;\r\n  };\r\n\r\n  showToast = toastMessage => {\r\n    this.setState({ toast: true, toastMessage });\r\n    setTimeout(() => this.setState({ toast: false, toastMessage: \"\" }), 5000);\r\n  };\r\n\r\n  render() {\r\n\r\n    // destructuring props: listen to states\r\n    const { toastMessage, toast, loading } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n          <Box\r\n              dangerouslySetInlineStyle={{\r\n              __style: {\r\n                  backgroundColor:'#ebe2da'\r\n              }\r\n          }}\r\n          margin={4}\r\n          padding={4}\r\n          shape=\"rounded\"\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          >\r\n              {/* Sign up form */}\r\n              <form style={{\r\n                  display: 'inlineBlock',\r\n                  textAlign:  'center',\r\n                  maxWidth: 450\r\n              }}\r\n              onSubmit={this.handleSubmit}\r\n              >\r\n              {/* Sign up form heading*/}\r\n                <Box\r\n                  marginBottom={2}\r\n                  display=\"flex\"\r\n                  direction=\"column\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Heading color=\"midnight\">Let's Get Started</Heading>\r\n                  <Text italic color=\"orchid\">Sign up to order some brews!</Text>\r\n                </Box>\r\n                {/* Username input */}\r\n                <TextField\r\n                  id=\"username\"\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  placeholder=\"Username\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Email Adress Input */}\r\n                <TextField\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email Adress\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Password input */}\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                <Button\r\n                  inline\r\n                  color=\"blue\"\r\n                  text=\"Submit\"\r\n                  type=\"submit\"\r\n                  /* Disable button when loading */\r\n                  disabled={loading}\r\n                />\r\n              </form>\r\n          </Box>\r\n          <ToastMessage show={toast} message={toastMessage} />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Signup;","import React from \"react\";\r\nimport { Container, Box, Button, Heading, Text, TextField, Modal, Spinner } from \"gestalt\";\r\nimport { Elements, StripeProvider, CardElement, injectStripe } from \"react-stripe-elements\";\r\nimport ToastMessage from \"./ToastMessage\";\r\nimport { getCart, calculatePrice, clearCart, calculateAmount } from \"../utils\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Strapi from \"strapi-sdk-javascript/build/main\";\r\nconst apiUrl = process.env.API_URL || \"https://strapi-server-raigyobeer.herokuapp.com\";\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass _CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    cartItems: [],\r\n    address: \"\",\r\n    postalcode: \"\",\r\n    city: \"\",\r\n    confirmationEmailAddress: \"\",\r\n    toast: false,\r\n    toastMessage: \"\",\r\n    orderProcessing: false,\r\n    modal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ cartItems: getCart() })\r\n  }\r\n\r\n  //Check input values\r\n  handleChange = ({ event, value }) => {\r\n    event.persist();\r\n    this.setState({ [event.target.name]: value});\r\n  };\r\n\r\n  handleConfirmOrder = async event => {\r\n    event.preventDefault();\r\n\r\n    if (this.isFormEmpty(this.state)) {\r\n      this.showToast(\"Fill in all fields\");\r\n      return;\r\n    }\r\n    this.setState({ modal: true });\r\n  }\r\n\r\n  handleSubmitOrder = async () => {\r\n    const { cartItems, city, address, postalcode, confirmationEmailAddress } = this.state;\r\n\r\n    const amount = calculateAmount(cartItems);\r\n    // Process order\r\n    this.setState({ orderProcessing: true });\r\n    let token;\r\n    try {\r\n      //create stripe token\r\n      const response = await this.props.stripe.createToken();\r\n      token = response.token.id;\r\n      //create order with strapi sdk (make request to backend)\r\n      await strapi.createEntry(\"orders\", {\r\n        amount,\r\n        brews: cartItems,\r\n        city,\r\n        postalcode,\r\n        address,\r\n        token\r\n      });\r\n      /*await strapi.plugins['email'].services.email.send({\r\n        to: confirmationEmailAddress,\r\n        from: 'vincent_chilot@live.be',\r\n        subject: `Order Confirmation - Raigyo Shop ${new Date(Date.now())} -Do not reply`,\r\n        text: \"Your order has been processed\",\r\n        html: \"<bold>Expect your order to arrive in 2-3 shipping days</bold>\"\r\n      });*/\r\n      //set order processing - false, modal - false\r\n      this.setState({ orderProcessing: false, modal: false });\r\n      //clear user cart of brews\r\n      clearCart();\r\n      //show success toast\r\n      this.showToast(\"Your order has been successfully submitted!\", true);\r\n    } catch (err) {\r\n      //set order processing - false, modal - false\r\n      this.setState({ orderProcessing: false, modal: false });\r\n      //show error toast\r\n      this.showToast(err.message);\r\n      console.log(err.message);\r\n      //this.showToast(\"The card number is not valid!\");\r\n    }\r\n  };\r\n\r\n  isFormEmpty = ({ address, postalcode, city, confirmationEmailAddress }) => {\r\n    return !address || !postalcode || !city || !confirmationEmailAddress;\r\n  };\r\n\r\n  showToast = (toastMessage, redirect = false) => {\r\n    this.setState({ toast: true, toastMessage });\r\n    setTimeout(\r\n      () =>\r\n        this.setState(\r\n          { toast: false, toastMessage: \"\" },\r\n          // if true passed to 'redirect' argument, redirect home\r\n          // redirect home, we have to use HOC 'withRouter' to access history\r\n          // because checkout is not part of switch component\r\n          () => redirect && this.props.history.push(\"/\")\r\n        ),\r\n      5000\r\n    );\r\n  };\r\n\r\n  closeModal = () => this.setState({ modal: false });\r\n\r\n  render() {\r\n\r\n    // Destructuring props\r\n    const { toast, toastMessage, cartItems, modal, orderProcessing } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <Box\r\n          color=\"darkWash\"\r\n          margin={4}\r\n          padding={4}\r\n          shape=\"rounded\"\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          direction=\"column\"\r\n        >\r\n          {/* Checkout form heading */}\r\n          <Heading color=\"midnight\">Checkout</Heading>\r\n          {/* User Cart */}\r\n          {/* Fragments let you group a list of children without adding extra nodes\r\n          -ex: div -  to the DOM. */}\r\n          {/* Here we check if there is something in the cart or not */}\r\n          {cartItems.length > 0 ? (\r\n            <React.Fragment>\r\n              {/* User Cart */}\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                direction=\"column\"\r\n                marginTop={2}\r\n                marginBottom={6}\r\n              >\r\n                <Text color=\"darkGray\" italic>\r\n                  {cartItems.length} Items for Checkout\r\n                </Text>\r\n                <Box padding={2}>\r\n                  {cartItems.map(item => (\r\n                    <Box key={item._id} padding={1}>\r\n                      <Text color=\"midnight\">\r\n                        {item.name} x {item.quantity} - $\r\n                        {item.quantity * item.price}\r\n                      </Text>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n                <Text bold>Total Amount: {calculatePrice(cartItems)}</Text>\r\n              </Box>\r\n              {/* Checkout Form */}\r\n              <form\r\n                style={{\r\n                  display: \"inlineBlock\",\r\n                  textAlign: \"center\",\r\n                  maxWidth: 450\r\n                }}\r\n                onSubmit={this.handleConfirmOrder}\r\n              >\r\n                {/* Shipping Address Input */}\r\n                <TextField\r\n                  id=\"address\"\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  placeholder=\"Shipping Address\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Postal Code Input */}\r\n                <TextField\r\n                  id=\"postalcode\"\r\n                  type=\"text\"\r\n                  name=\"postalcode\"\r\n                  placeholder=\"Postal Code\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* City Input */}\r\n                <TextField\r\n                  id=\"city\"\r\n                  type=\"text\"\r\n                  name=\"city\"\r\n                  placeholder=\"City of Residence\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Confirmation Email Address Input */}\r\n                <TextField\r\n                  id=\"confirmationEmailAddress\"\r\n                  type=\"email\"\r\n                  name=\"confirmationEmailAddress\"\r\n                  placeholder=\"Confirmation Email Address\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Credit card elements */}\r\n                <CardElement id=\"stripe__input\" onReady={input => input.focus()}\r\n                />\r\n                {/*<button id=\"stripe__button\" type=\"submit\">\r\n                  Submit\r\n                </button>*/}\r\n                <Button\r\n                  inline\r\n                  id=\"stripe__button\"\r\n                  color=\"blue\"\r\n                  text=\"Submit\"\r\n                  type=\"submit\"\r\n                />\r\n              </form>\r\n            </React.Fragment>) : (\r\n              //Default text if no items in the cart\r\n              <Box color=\"darkWash\" shape=\"rounded\" padding={4}>\r\n              <Heading align=\"center\" color=\"watermelon\" size=\"xs\">\r\n                Your Cart is Empty\r\n              </Heading>\r\n              <Text align=\"center\" italic color=\"green\">\r\n                Add some brews!\r\n              </Text>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n        {/* Confirmation modal */}\r\n        {modal && (\r\n          <ConfirmationModal\r\n            orderProcessing={orderProcessing}\r\n            cartItems={cartItems}\r\n            closeModal={this.closeModal}\r\n            handleSubmitOrder={this.handleSubmitOrder}\r\n          />\r\n        )}\r\n        <ToastMessage show={toast} message={toastMessage} />\r\n      </Container>\r\n      )\r\n    }\r\n}\r\n\r\n// Destructuring props\r\nconst ConfirmationModal = ({orderProcessing, cartItems, closeModal, handleSubmitOrder}) => (\r\n  <Modal\r\n    accessibilityCloseLabel=\"close\"\r\n    accessibilityModalLabel=\"Confirm your order\"\r\n    heading=\"Confirm your order\"\r\n    onDismiss={closeModal}\r\n    footer={\r\n      <Box\r\n        display=\"flex\"\r\n        marginRight={-1}\r\n        marginLeft={-1}\r\n        justifyContent=\"center\"\r\n      >\r\n        <Box padding={1}>\r\n          <Button\r\n            size=\"lg\"\r\n            color=\"red\"\r\n            text=\"Submit\"\r\n            disabled={orderProcessing}\r\n            onClick={handleSubmitOrder}\r\n          />\r\n        </Box>\r\n        <Box padding={1}>\r\n          <Button\r\n            size=\"lg\"\r\n            text=\"Cancel\"\r\n            disabled={orderProcessing}\r\n            onClick={closeModal}\r\n          />\r\n        </Box>\r\n\r\n      </Box>\r\n    }\r\n    role=\"alertdialog\"\r\n    size=\"sm\"\r\n  >\r\n    {/* Order Summary */}\r\n    {!orderProcessing && (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        padding={2}\r\n        color=\"lightWash\"\r\n      >\r\n        {cartItems.map(item => (\r\n          <Box key={item._id} padding={1}>\r\n            <Text size=\"lg\" color=\"red\">\r\n              {item.name} x {item.quantity} - ${item.quantity * item.price}\r\n            </Text>\r\n          </Box>\r\n        ))}\r\n        <Box paddingY={2}>\r\n          <Text size=\"lg\" bold>\r\n            Total: {calculatePrice(cartItems)}\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    )}\r\n\r\n    {/* Order Processing Spinner */}\r\n    <Spinner\r\n      show={orderProcessing}\r\n      accessibilityLabel=\"Order Processing Spinner\"\r\n    />\r\n    {orderProcessing && (\r\n      <Text align=\"center\" italic>\r\n        Submitting Order...\r\n      </Text>\r\n    )}\r\n  </Modal>\r\n);\r\n\r\nconst CheckoutForm = withRouter(injectStripe(_CheckoutForm));\r\n\r\nconst Checkout = () => (\r\n  <StripeProvider\r\n    apiKey=\"pk_test_51HD8PbKXuUXB2CzNtyeX3uWQ4bDgDHoMweFwT7vnY705d56aHB5z4edoc5amUu4NJB9zYsV78tIyJDgghBCt5K5A00WAF8rACN\"\r\n  >\r\n    <Elements>\r\n      <CheckoutForm />\r\n    </Elements>\r\n  </StripeProvider>\r\n)\r\n\r\nexport default Checkout;\r\n","import React from 'react';\r\nimport { Box, Text, Heading, Image, Button } from 'gestalt';\r\nimport { getToken, clearCart, clearToken } from \"../utils\"\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport logo from '../img/logo.svg';\r\n\r\n//Return a different nav bar if user is authentified or not\r\n/*const Navbar = () => {\r\n  return getToken() !== null ? <AuthNav /> : <UnAuthNav />;\r\n};*/\r\n\r\n//We use a class instead to have the ability to add functions\r\nclass Navbar extends React.Component {\r\nhandleSignout = () => {\r\n  //clear token\r\n  clearToken();\r\n  //clear cart\r\n  clearCart();\r\n  //redirect home, we have to use HOC 'withRouter' to access history\r\n  //because navbar is not part of switch component\r\n  this.props.history.push('/');\r\n}\r\n\r\n  render(){\r\n    return getToken() !== null ?\r\n    <AuthNav handleSignout={this.handleSignout}/> : <UnAuthNav />;\r\n  }\r\n}\r\n\r\nconst AuthNav = ({ handleSignout }) => (\r\n  <Box\r\n  display=\"flex\"\r\n  alignItems=\"center\"\r\n  justifyContent=\"around\"\r\n  height={70}\r\n  color=\"midnight\"\r\n  padding={1}\r\n  shape=\"roundedBottom\"\r\n  >\r\n    { /* Checkout Link */ }\r\n    <NavLink activeClassName=\"active\" to=\"/checkout\">\r\n      <Text size=\"xl\" color=\"white\" >Checkout</Text>\r\n    </NavLink>\r\n\r\n    { /* Title and Logo */ }\r\n    <NavLink activeClassName=\"active\" exact to=\"/\">\r\n      <Box display=\"flex\" alignItems=\"center\">\r\n        <Box height={50} width={50} margin={2}>\r\n          <Image\r\n            alt=\"Sop logo\"\r\n            naturalHeight={1}\r\n            naturalWidth={1}\r\n            src={logo}\r\n          />\r\n        </Box>\r\n        {/* Title */}\r\n        <div className=\"main-title\">\r\n          <Heading size=\"xs\" color=\"orange\">\r\n            Raigyo shop\r\n          </Heading>\r\n        </div>\r\n      </Box>\r\n    </NavLink>\r\n\r\n    { /* Signout Button */ }\r\n    <Button\r\n      onClick={handleSignout}\r\n      color=\"transparent\"\r\n      text=\"Sign Out\"\r\n      inline\r\n      size=\"md\"\r\n    />\r\n\r\n  </Box>\r\n)\r\n\r\n\r\nconst UnAuthNav = () => (\r\n  <Box\r\n  display=\"flex\"\r\n  alignItems=\"center\"\r\n  justifyContent=\"around\"\r\n  height={70}\r\n  color=\"midnight\"\r\n  padding={1}\r\n  shape=\"roundedBottom\"\r\n  >\r\n    { /* Signin Link */ }\r\n    <NavLink activeClassName=\"active\" to=\"/signin\">\r\n      <Text size=\"xl\" color=\"white\" >Signin</Text>\r\n    </NavLink>\r\n\r\n    { /* Title and Logo */ }\r\n    <NavLink activeClassName=\"active\" exact to=\"/\">\r\n      <Box display=\"flex\" alignItems=\"center\">\r\n        <Box height={50} width={50} margin={2}>\r\n          <Image\r\n            alt=\"Sop logo\"\r\n            naturalHeight={1}\r\n            naturalWidth={1}\r\n            src={logo}\r\n          />\r\n        </Box>\r\n        <Heading size=\"xs\" color=\"orange\">\r\n          Raigyo shop\r\n        </Heading>\r\n      </Box>\r\n    </NavLink>\r\n\r\n    { /* Signup In Link */ }\r\n    <NavLink activeClassName=\"active\" to=\"/signup\">\r\n      <Text size=\"xl\" color=\"white\" >Signup</Text>\r\n    </NavLink>\r\n\r\n  </Box>\r\n)\r\n\r\nexport default withRouter (Navbar);","import React from \"react\";\r\nimport Strapi from \"strapi-sdk-javascript/build/main\";\r\nimport { Box, Heading, Card, Image, Text, Button, Mask, IconButton  } from 'gestalt';\r\nimport { calculatePrice, setCart, getCart } from \"../utils\"\r\nimport { Link } from 'react-router-dom';\r\nconst apiUrl = process.env.API_URL || \"https://strapi-server-raigyobeer.herokuapp.com\";\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass Brews extends React.Component {\r\n\r\n  state = {\r\n    brews: [],\r\n    brand: '',\r\n    cartItems: []\r\n  }\r\n\r\n  // Retrieve the brews datas\r\n  async componentDidMount() {\r\n  // Retrieve the brew ID\r\n  // console.log(this.props.match.params.brandId)\r\n      try {\r\n        const response = await strapi.request(\"POST\", \"/graphql\", {\r\n          data: {\r\n            query: `query {\r\n            brand(id: \"${this.props.match.params.brandId}\") {\r\n              _id\r\n              name\r\n              brews {\r\n                _id\r\n                name\r\n                description\r\n                image {\r\n                  url\r\n                }\r\n                price\r\n              }\r\n            }\r\n          }`\r\n          }\r\n        });\r\n        //console.log(response);\r\n        this.setState({\r\n          brews: response.data.brand.brews,\r\n          brand: response.data.brand.name,\r\n          cartItems: getCart()\r\n        });\r\n      }\r\n      catch (err) {\r\n        console.error(err);\r\n      }\r\n  }\r\n\r\n  // Manage cart (add items)\r\n  addToCart = brew => {\r\n    const alreadyInCart = this.state.cartItems.findIndex(\r\n      item => item._id === brew._id\r\n    );\r\n    //if not in the cart: add item / else item already in the cart: increase quantity\r\n    if (alreadyInCart === -1) {\r\n      const updatedItems = this.state.cartItems.concat({\r\n        ...brew,\r\n        quantity: 1\r\n      });\r\n      this.setState({ cartItems: updatedItems }, () => setCart(updatedItems));\r\n    } else {\r\n      const updatedItems = [...this.state.cartItems];\r\n      updatedItems[alreadyInCart].quantity += 1;\r\n      this.setState({ cartItems: updatedItems }, () => setCart(updatedItems));\r\n    }\r\n  }\r\n\r\n  // Manage cart (delete items with the id passed into the function)\r\n  // In real it only keeps the item that have not the item id to delete\r\n  deleteItemFromCart = itemToDeleteID => {\r\n    const filteredItems = this.state.cartItems.filter(item => item._id !== itemToDeleteID);\r\n    this.setState({ cartItems: filteredItems }, () => setCart(filteredItems) );\r\n  }\r\n\r\n  render() {\r\n\r\n    const { brand, brews, cartItems } = this.state;\r\n\r\n    return (\r\n      <Box\r\n        marginTop={4}\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"start\"\r\n        dangerouslySetInlineStyle={{\r\n          __style: {\r\n            flexWrap: 'wrap-reverse'\r\n          }\r\n        }}\r\n      >\r\n         {/* Brews section */}\r\n         <Box\r\n          display=\"flex\"\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n         >\r\n           {/* Brews heading */}\r\n           <Box margin={2}>\r\n             <Heading color=\"orchid\">{brand}</Heading>\r\n\r\n           </Box>\r\n          {/* Brews */}\r\n          <Box\r\n            dangerouslySetInlineStyle={{\r\n              __style: {\r\n                backgroundColor: \"#bdcdd9\"\r\n              }\r\n            }}\r\n            wrap\r\n            shape=\"rounded\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            padding={4}\r\n          >\r\n            {brews.map(brew => (\r\n              <Box paddingY={4} margin={2} width={210} key={brew._id}>\r\n                <Card\r\n                  image={\r\n                    <Box height={250} width={200}>\r\n                      <Image\r\n                        fit=\"cover\"\r\n                        alt=\"Brand\"\r\n                        naturalHeight={1}\r\n                        naturalWidth={1}\r\n                        src={`${apiUrl}${brew.image.url}`}\r\n                      />\r\n                    </Box>\r\n                  }\r\n                >\r\n                  <Box\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    direction=\"column\"\r\n                  >\r\n                    <Box marginBottom={2}>\r\n                      <Text bold size=\"xl\">\r\n                        {brew.name}\r\n                      </Text>\r\n                    </Box>\r\n                    <Text>{brew.description}</Text>\r\n                    <Text color=\"orchid\">${brew.price}</Text>\r\n                    <Box marginTop={2}>\r\n                      <Text bold size=\"xl\">\r\n                        <Button\r\n                          onClick={() => this.addToCart(brew)}\r\n                          color=\"blue\"\r\n                          text=\"Add to Cart\"\r\n                        />\r\n                      </Text>\r\n                    </Box>\r\n                  </Box>\r\n                </Card>\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n        {/* User Cart */}\r\n        <Box alignSelf=\"end\" marginTop={2} marginLeft={8}>\r\n          <Mask shape=\"rounded\" wash>\r\n            <Box\r\n              display=\"flex\"\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              padding={2}\r\n            >\r\n              {/* User cart heading */}\r\n              <Heading align=\"center\" size=\"sm\">Your cart</Heading>\r\n              <Text color=\"gray\" italic>\r\n                {cartItems.length} items selected\r\n              </Text>\r\n\r\n              {/* Cart Items / real time update quantity, price... */}\r\n              {cartItems.map(item => (\r\n                <Box key={item._id} display=\"flex\" alignItems=\"center\">\r\n                  <Text>\r\n                    {item.name} x {item.quantity} - $\r\n                    {(item.quantity * item.price).toFixed(2)}\r\n                  </Text>\r\n                  <IconButton\r\n                    accessibilityLabel=\"Delete Item\"\r\n                    icon=\"cancel\"\r\n                    size=\"sm\"\r\n                    iconColor=\"red\"\r\n                    onClick={() => this.deleteItemFromCart(item._id)}\r\n                  />\r\n                </Box>\r\n              ))}\r\n\r\n              <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              direction=\"column\"\r\n              >\r\n                <Box margin={2}>\r\n                  {/*If zero, shows default text component */}\r\n                  {cartItems.length === 0 && (\r\n                    <Text>Please select some items</Text>\r\n                  )}\r\n                </Box>\r\n                <Text size=\"lg\">Total: {calculatePrice(cartItems)}</Text>\r\n                <Text>\r\n                  <Link to=\"/checkout\">Checkout</Link>\r\n                </Text>\r\n\r\n              </Box>\r\n            </Box>\r\n\r\n          </Mask>\r\n\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Brews;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { getToken } from './utils';\nimport \"gestalt/dist/gestalt.css\";\nimport App from \"./components/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport Signin from \"./components/Signin\";\nimport Signup from \"./components/Signup\";\nimport Checkout from \"./components/Checkout\";\nimport Navbar from \"./components/Navbar\";\nimport Brews from \"./components/Brews\";\n\n//Routes\n\n//We create a 'private' route for authenticated users\n//Users have to be logged to access the checkout route\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    getToken() !== null ?\n      <Component {...props} /> : <Redirect to={{\n        pathname: '/signin',\n        state: { from: props.location }\n      }} />\n  )} />\n)\n\nconst Root = () => (\n  <Router>\n    <React.Fragment>\n      <Navbar />\n      <Switch>\n        <Route component={App} exact path=\"/\" />\n        {/* use exact property otherwise it will always choose the route \"/\"*/}\n        <Route component={Signin} path=\"/signin\" />\n        <Route component={Signup} path=\"/signup\" />\n        {/* Route displayed only if logged otherwise redirected to signin */}\n        <PrivateRoute component={Checkout} path=\"/checkout\" />\n        {/* Dynamic route*/}\n        <Route component={Brews} path=\"/:brandId\" />\n      </Switch>\n    </React.Fragment>\n  </Router>\n)\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c0039328.svg\";"],"sourceRoot":""}